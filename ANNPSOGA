clc;clear;
clc 
clear
tic 
rng default
filename = 'datafile.xlsx';
sheetname1 = 'Sheet1'; 
sheetname2 = 'Sheet2'; 
input = xlsread(filename,sheetname1,'A1:Z10000'); 
target = xlsread(filename,sheetname2,'A1:Z10000'); 
inputs=input';
targets=target';
number_input=length(inputs(:,1));
number_output=length(targets(:,1));
number_hidden=5; 
%% Feed Resources
net=feedforwardnet(number_hidden); % Dat an cho mang neural
net=configure(net,inputs,targets); 
kk=number_input*number_hidden+number_hidden+number_hidden+number_output; % tinh toan khoi luong bien

CostFunction=@(x) myfunc(x,number_hidden,number_input,number_output,net,inputs,targets);

tic;
%% Initialization Boundary of weight, b ,.. sigmoid
for i = 1:kk
Boundary(i,1)=-1.5;
Boundary(i,2)=1.5;
end
nVar=size(Boundary,1);

VarSize=[1 nVar];

VarMin=Boundary(:,1);
VarMax=Boundary(:,2);
VelMax=0.1*(VarMax-VarMin); % velocity max
VelMin=-VelMax;             % velocity max
MaxIt=100;
nPop=10;

%% PSO Parameters
w=1;            % Inertia Weight
wdamp=0.99;     % Inertia Weight Damping Ratio
c1=1.5;         % Personal Learning Coefficient
c2=2.0;         % Global Learning Coefficient

%% GA parameters
pc=0.7;                 % Crossover Percentage, Phan tram lai cheo
nc=2*round(pc*nPop/2);  % Number of Offsprings (also Parnets), So phan tu duoc phep lai cheo
gamma=0.4;              % Extra Range Factor for Crossover

pm=0.3;                 % Mutation Percentage
nm=round(pm*nPop);      % Number of Mutants
mu=0.1;         % Mutation Rate
beta=8;

%% Template of Population
% Population
empty_individual.Position=[];
empty_individual.Cost=[];

pop=repmat(empty_individual,nPop,1);

% Paticle
empty_particle.Position=[];
empty_particle.Cost=[];
empty_particle.Velocity=[];
empty_particle.Best.Position=[];
empty_particle.Best.Cost=[];

% Global Best
GlobalBest.Cost=inf;


% Khoi tao ngau nhien vi tri cua hat, vector,...
for i=1:nPop
    
    for j=1:nVar
    % Tao ngau nghien vi tri tu VarMin den VarMax cho VarSize phan tu
    pop(i).Position(1,j)=unifrnd(VarMin(j,1),VarMax(j,1));
    end
    % Tinh gia tri cua vi tri do
    pop(i).Cost=CostFunction(pop(i).Position(1,:));      
    
    % Nhap vi tri cho hat
    particle(i).Position=pop(i).Position;          
    
    % Tao ma tran van toc choi VarSize kich thuoc
    
    particle(i).Velocity=zeros(VarSize);            
    
    % Lay gia tri tinh duoc cua Ham cho tung gia tri cua hat
    particle(i).Cost=pop(i).Cost;                   
    
    % Cap nhat vi tri tot nhat cua Hat
    particle(i).Best.Position=particle(i).Position; % Vi tri tot nhat cua Hat
    particle(i).Best.Cost=particle(i).Cost;         % Gia tri tot nhat tuong ung cua hat
    
    % Cap nhat vi tri tot nhat toan cau
    if particle(i).Best.Cost<GlobalBest.Cost
        
        GlobalBest=particle(i).Best;        % So sanh gia tri tot nhat cua Hat voi Nhom
        
    end
end


Costs=[pop.Cost];                   % Dinh nghia gia tri

% Lay gia tri sap xep tu nho den lon theo cot, va thu tu sap xep cua no
[Costs, SortOrder]=sort(Costs);     
pop=pop(SortOrder);

% Lay gia tri tot nhat sau khi sap xep
BestSol=pop(1);                     

% Tao ma tran luu giu nhung gia tri tot nhat 
BestCost=zeros(MaxIt,1);            

% Gia tri xau nhat
WorstCost=pop(end).Cost;        

maxrun=1; 
for run=1:maxrun 
for generation=1:MaxIt

    P=exp(-beta*Costs/WorstCost);   % p(0)=e^(-beta*Costs/WorstCost)
    P=P/sum(P);  
    
    % Khoi tao kich thuoc ma tran population crossover theo hang
    pop_crossover=repmat(empty_individual,nc/2,2);
    % Chon 1 nua trong so phan tu duoc lai cheo
    for k=1:nc/2
        
        % Chon ngau nhien the he cha me de lai giong
        % Select Parents Indices
        i1=RouletteWheelSelection(P);   % Gen cua cha
        i2=RouletteWheelSelection(P);   % Gen cua me
        p1=pop(i1);                     % Lay Gen cua cha
        p2=pop(i2);                     % Lay Gen cua cha
        
        % Apply Crossover
        % Lai cheo 
        [pop_crossover(k,1).Position, pop_crossover(k,2).Position]=Crossover(p1.Position,p2.Position,gamma,VarMin,VarMax,nVar);
        
        % Evaluate Offsprings
        pop_crossover(k,1).Cost=CostFunction(pop_crossover(k,1).Position);
        pop_crossover(k,2).Cost=CostFunction(pop_crossover(k,2).Position);
        
    end    
    
    % Lay tat ca gia tri vua roi xep theo 1 hang doc
    pop_crossover=pop_crossover(:);

    % Dot Bien
    pop_mutation=repmat(empty_individual,nm,1);
    
    for k=1:nm
        
        % Lua chon cha me
        i=randi([1 nPop]);
        p=pop(i);
        
        % Apply Mutation
        pop_mutation(k).Position=Mutate(p.Position,mu,VarMin,VarMax,nVar);
        
        % Evaluate Mutant
        pop_mutation(k).Cost=CostFunction(pop_mutation(k).Position);
        
    end
    


    % Gop toan bo dan so vao
    pop=[pop
        pop_crossover
        pop_mutation];  %ok
    
    % Sap xep lai dan so
    Costs=[pop.Cost];
    [Costs, SortOrder]=sort(Costs);
    pop=pop(SortOrder);
    
    % Tim gia tri xau nhat
    WorstCost=max(WorstCost,pop(end).Cost);
    
    % Cat Giam
    pop=pop(1:nPop);
    Costs=Costs(1:nPop);
    
    % Tap hop nhung gia tri tot nhat tim duoc
    BestSol=pop(1);
    
    % Tap hop nhung gia tri tot nhat tim duoc
    for i=1:nPop
%         Neu gia tri cua tap hop nho hon gia tri cua hat
        if pop(i).Cost<=particle(i).Cost
%             Cap nhat vi tri va gia tri cua hat
            particle(i).Position = pop(i).Position;
            particle(i).Cost = pop(i).Cost;
        end
        % cap nhat
        Cx(i) = particle(i).Cost;
    end
    
    % Trong so cac hat cua lay gia tri tot nhat cho the he thu it
    [BestCost(generation),r]=min(Cx);
    GlobalBest.Cost=particle(r).Cost;
    GlobalBest.Position=particle(r).Position;
    
    BestCostGA(generation)=BestCost(generation);

    
    % Su dung PSO tinh toan vi tri tot nhat trong so cac gia tri tim duoc
    % cua GA
        for i=1:nPop
            
          particle(i).Velocity = w*particle(i).Velocity ...
            +c1*rand(VarSize).*(particle(i).Best.Position-particle(i).Position) ...
            +c2*rand(VarSize).*(GlobalBest.Position-particle(i).Position);

        % Gioi han toc do cho vector
            for j=1:nVar
                particle(i).Velocity(1,j) = max(particle(i).Velocity(1,j),VelMin(j,1));
                particle(i).Velocity(1,j) = min(particle(i).Velocity(1,j),VelMax(j,1));
            end
            
        % Cap nhat vi tri cua hat
        particle(i).Position = particle(i).Position + particle(i).Velocity;
        
        % Velocity Mirror Effect
            for j =1 : nVar
                IsOutside(1,j)=(particle(i).Position(1,j)<VarMin(j,1) | particle(i).Position(1,j)>VarMax(j,1));
            end
                particle(i).Velocity(IsOutside)=-particle(i).Velocity(IsOutside);
        
        % Apply Position Limits
            for j =1 : nVar
                particle(i).Position(1,j) = max(particle(i).Position(1,j),VarMin(j,1));
                particle(i).Position(1,j) = min(particle(i).Position(1,j),VarMax(j,1));
            end
        % Tinh toan gia tri cua gat
        particle(i).Cost = CostFunction(particle(i).Position);

            % Cap nhat vi tri tot nhat
            if particle(i).Cost<particle(i).Best.Cost

                particle(i).Best.Position=particle(i).Position;
                particle(i).Best.Cost=particle(i).Cost;

                % Cap nhat vi tri tot nhat toan cau
                if particle(i).Best.Cost<GlobalBest.Cost

                    GlobalBest=particle(i).Best;

                end

            end
        
        end
        % Cap nhat tro lai cho dan so
    for i=1:nPop
        if particle(i).Cost<=pop(i).Cost
            pop(i).Position = particle(i).Position;
            pop(i).Cost = particle(i).Cost;
            
        end
        Cx(i)=pop(i).Cost;
    end
    
    [BestCost(generation),r]=min(Cx);
    GlobalBest.Cost=pop(r).Cost;
    GlobalBest.Position=pop(r).Position; 
    
    BestCost(generation);       
    disp(['Iteration ' num2str(generation) ': Best Cost = ' num2str(BestCost(generation))]);
    w=w*wdamp;       
            

end
        xo=GlobalBest.Position; 
        fval=CostFunction(xo); 
        xbest(run,:)=xo;
        ybest(run,1)=CostFunction(xo); 
end
    disp('Final nn model is net_f') 
    net_f=feedforwardnet(number_hidden); 
    net_f=configure(net_f,inputs,targets); 
    [a b]=min(ybest); 
    xo=xbest(b,:);
    k=0; 
    for i=1:number_hidden 
        for j=1:number_input 
            k=k+1;
            xi(i,j)=xo(k); 
        end
    end
    for i=1:number_hidden 
        k=k+1;
        xl(i)=xo(k); % lay tu 40 45
        xb1(i,1)=xo(k+number_hidden); % lay tu 45 den 50
    end
    for i=1:number_output 
        k=k+1; 
        xb2(i,1)=xo(k);
    end
    net_f.iw{1,1}=xi; 
    net_f.lw{2,1}=xl; 
    net_f.b{1,1}=xb1; 
    net_f.b{2,1}=xb2; 
    %Calculation of MSE 
    err=sum((net_f(inputs)-targets).^2)/length(net_f(inputs)) 
    %Regression plot 
    plotregression(targets,net_f(inputs)) 
    disp('Hoan thanh tinh toan cac thong so cho Artifical Neural Network');
% toc;
% figure;
% semilogy(BestCost,'-ro','LineWidth',2);
% xlabel('Iteration');
% ylabel('Best Cost');
% grid on;
